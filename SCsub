import os
import subprocess
from rust_builders import add_rust_builders



Import('env')
add_rust_builders(env)
rustc_version = env.RustcVersion()

[parse] = env.RustProgram("#bin/gdrs-parse", "gdrs-parse", [rustc_version])

api_flags = []
api_flags.extend(filter(lambda f: f.startswith("-D"), env["CPPFLAGS"]))
api_flags.extend(map(lambda p: "-I" + os.path.join(".", p[1:]), filter(lambda p: p.startswith("#"), env["CPPPATH"])))

cxx_verbose = subprocess.check_output([env["CXX"], "-v", "-E", "blank.cpp"], stderr = subprocess.STDOUT).splitlines()
for line in cxx_verbose[cxx_verbose.index("#include <...> search starts here:") + 1 : cxx_verbose.index("End of search list.")]:
	api_flags.append("-I" + line.lstrip())

api_sources = []
for s in env.core_sources:
	api_sources.append(File(s) if isinstance(s, str) else s[0].children(False)[0])
for s in env.servers_sources:
	api_sources.append(File(s) if isinstance(s, str) else s[0].children(False)[0])
for s in env.scene_sources:
	api_sources.append(File(s) if isinstance(s, str) else s[0].children(False)[0])
for s in env.tool_sources:
	api_sources.append(File(s) if isinstance(s, str) else s[0].children(False)[0])
for s in env.drivers_sources:
	api_sources.append(File(s) if isinstance(s, str) else s[0].children(False)[0])
api_sources = filter(lambda s: os.path.splitext(str(s))[1] == ".cpp", api_sources)

api_json = env.Command(
	"gdrs-api{}.json".format(os.path.splitext(env["LIBSUFFIX"])[0]),
	api_sources + [parse],
	"{} -o$TARGET {} {}".format(os.path.relpath(str(parse), Dir("#").abspath), " ".join(api_flags), " ".join(map(lambda s: os.path.relpath(str(s), Dir("#").abspath), api_sources)))
)

[host, host_macros] = env.RustGodotModule("libgdrs-host", "gdrs-host", [rustc_version, api_json])

env.Append(
	LINKFLAGS = ["-Wl,--whole-archive,-L{},-l:{},--no-whole-archive".format(os.path.relpath(os.path.dirname(host.abspath), Dir("#").abspath), str(host))],
	LIBS = [host, "dl", "pthread", "gcc_s", "c", "m", "rt", "util"])

env.modules_sources.extend([env.Object("register_types.cpp"), env.Object("gdrs-alloc.cpp"), env.Object(host_macros)])
